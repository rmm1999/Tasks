q()
install.package("adventr")
install.packages("adventr")
q()
rinat?
?rinat
install.packages("path to file/NicheMapR_x.x.x.zip", repos = NULL,
type = "win.binary")
install.packages("NicheMapR_x.x.x.zip", repos = NULL,
type = "win.binary")
install.packages('devtools')
devtools::install_github('mrke/NicheMapR')
library(NicheMapR)
get.global.climate(folder="path")
head(out)
library(rinat)
tree_obs <- get_inat_obs(query = "Quercus velutina", quality = "research", geo = TRUE, maxresults = 525, meta = FALSE)
outPath <- "C:\\Users\\12345\\Desktop\\Research class\\Black Oak\\"
Keep <- c()
counter <- 1
for( i in 1:nrow(tree_obs)) {
iurl <- tree_obs$image_url[i]
if (iurl != "") {
iname <- paste(outPath, tree_obs$id[i], "-", tree_obs$taxon_species_name[i], "-", tree_obs$observed_on[i], ".jpg", sep="")
z <- try(download.file(iurl, iname, mode = "wb"))
if (class(z) != "try-error")	{
Keep[counter] <- i
counter <- counter + 1
}
}
}
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1 e6, trueMean1, trueSD1)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot1(Sample1, Sample2)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
focus
Focus
ToMom <- length(grep("mom", Focus))length(Focus)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMom
ToMomMom
ToMomDad
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ManySibling <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
quantile(ManySibling)
mean(ManySibling)
plot(density(ManySibling), main="", xlab=" proportion shared genes")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1 - p)
bb <- (1 - p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"),lty=1, lwd=2, bty="n")
Pop <- simPop(500)
Pop
points(Pop[,"freqa"], Pop[, "Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[, "Genotypes.aa"]/50, pch=22, bg="red")
library(LearnPopGen)
install.packages(LearnPopGen)
install.packages(learnPopGen)
install.packages("learnPopGen")
library(LearnPopGen)
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
source("http://jonsmitchell.com/code/fxn05.R")
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h =1, s = 0)
plot(1:nrow(Pop1)m Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", , ylab="allele freq.", lwd = 2)
lines(1:nrow(Pop1)m Pop1[,2], lwd=2, col='red')
legend("top left", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty = "n")
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", , ylab="allele freq.", lwd = 2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("top left", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty = "n")
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", ylab="allele freq.", lwd = 2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = '1', xlab="generation", ylab="allele freq.", lwd = 2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "l", xlab="generation", ylab="allele freq.", lwd = 2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("top left", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty = "n")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty = "n")
plotFit(nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi ^ 2 ~ "=" ~. (Chisq)), legend.text=c("Expected", "Observed"))
Observed <- c(10, 10, 10, 10)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi ^ 2 ~ "=" ~. (Chisq)), legend.text=c("Expected", "Observed"))
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi ^ 2 ~ "=" ~. (Chisq)), legend.text=c("Expected", "Observed"))
Observed <- c(10, 10, 10, 10)
Chisq <- sum(((Expectation - Observed) ^ 2)/ Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi ^ 2 ~ "=" ~. (Chisq)), legend.text=c("Expected", "Observed"))
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee80b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
plotChis(counts)
Chisqs <- sum(((Expectation - Observed) ^ 2)/ Expectation)
plotChis(counts)
Chisqs <- apply(counts, 1, calcChis)
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
Avg
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70)) / length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main = "", xlab="chi-squared values", ylab="frequency")
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels=backgrounds)
mtext(side = 1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
for(i in backgrounds) {
Data <- Chisqs[which(results[,3] == 1)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
counter <- 1
for(i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline(v = 11.70, lty = 2, lwd = 2, col = 'black')
Simulation <- simDraws(10000)
addHist(y = 7, Dat=Simulation, Color='lightgray')
addHist(Y = 7, Dat=Simulation, Color='lightgray')
mtext(side = 2, at=7, line=0, "simulated")
abline(v = 11.70, lty = 2, lwd = 2, col = 'black')
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25)
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25)
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit)<- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit)<- 1:6
Simulation5 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit)<- 1:6
Simulation6 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0, 0, 0, 0.25))
mtext(side = 2, at=8, line=0, "sel. sim.")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
library(phytools)
library(ape)
text.string <- "(((((((cow, pig), whale), (bat(lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree <- read.tree(text="(((AB),(CD)), E);")
plotTree(tree, offset=1)
tiplabels(frame="circle", bg='lightblue', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.level
tree$edge
AnolisTree <- force.ultrametric(read.tree("https://jinsmitchell.com/data/anolistre"))
AnolisTree <- force.ultrametric(read.tree("https://jinsmitchell.com/data/anolistree"))
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolistree"))
par(las=1)
hist(AnolisTree$edge. length, col='black', border='white', main="", xlab="edge lengths for Anolis tree", ylim=c(0, 50), xlim=c(0, 6))
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for Anolis tree", ylim=c(0, 50), xlim=c(0, 6))
setwd("C:\\Users\\12345\\Desktop\\Evolution")
Data <- read.csv("lizarddata.csv")
setwd("C:\\Users\\12345\\Desktop\\Evolution")
dir()
setwd("C:\\Users\\12345\\Desktop\\Evolution")
Data <- read.csv("lizard_data.csv")
head(Data)
unique(Data$Month)
Surv <- tapply(Data$Egg.Survival, Data$Month, function(x) length(which(x == "N"))/length(x))
Surv
barplot(Surv)
par(mar=c(4,5,1,1), las=1)
barplot(Surv, names.arg = c("Early", "Late"), col="black")
par(mar=c(4,5,1,1), las=1)
barplot(Surv, names.arg = c("Early", "Late"), col="black", width = 0.5)
par(mar=c(4,5,1,1), las=1)
barplot(Surv, names.arg = c("Early", "Late"), col="black", width = 0.1)
setwd("C:\\Users\\12345\\Desktop\\Evolution\\Tasks\\Task_08")
library("phytools")
tree <- read.tree("https://jonsmitchell.com/data/anolis.tre")
plot(tree, type="fan")
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
?fastAnc
par(mar=c(0.1, 0.1, 0.1, 0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25 * Ancestors$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type="fan", legend=0,7 * max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilData
fossilNodes <- c()
nodeN <- c()
{
for(i in 1:nrow(fossilData))
i <- if(i==1){
print(Ancestors) }
}
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes <- c()
nodeN <- c()
{
for(i in 1:nrow(fossilData))
i <- 1 if(i==1){
print(Ancestors) }
}
fossilNodes <- c()
nodeN <- c()
{
for(i in 1:nrow(fossilData))
i < 1 if(i==1){
print(Ancestors) }
}
{
for(i in 1:nrow(fossilData))
i <- 1 if(i==1){
print(Ancestors) }
}
nodeN <- c()
fossilNodes <- c()
nodeN <- c()
{
for(i in 1:nrow(fossilData))
i <- 1 if( i == 1) {
print(Ancestors) }
}
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
{
for(i in 1:nrow(fossilData))
i <- 1
if(i==1){
print(Ancestors) }
}
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
Ancestors_withFossils <- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
install.packages("geiger")
library(geiger)
fitContinuous(tree, svl, model="BM")
fitContinuous(tree, svl, model="OU")
fitContinuous(tree, svl, model="EB")
